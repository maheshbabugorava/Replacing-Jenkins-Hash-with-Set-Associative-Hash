diff --git a/net/sched/sch_fq_codel.c b/net/sched/sch_fq_codel.c
index 58de83ae3..bd4f58f6a 100644
--- a/net/sched/sch_fq_codel.c
+++ b/net/sched/sch_fq_codel.c
@@ -55,6 +55,8 @@ struct fq_codel_sched_data {
 	struct fq_codel_flow *flows;	/* Flows table [flows_cnt] */
 	u32		*backlogs;	/* backlog table [flows_cnt] */
 	u32		flows_cnt;	/* number of flows */
+	u32		num_sets;	/* number of sets in the hash */
+	u32		associativity;	/* associativity of the hash */
 	u32		quantum;	/* psched_mtu(qdisc_dev(sch)); */
 	u32		drop_batch_size;
 	u32		memory_limit;
@@ -93,7 +95,37 @@ static unsigned int fq_codel_classify(struct sk_buff *skb, struct Qdisc *sch,
 
 	filter = rcu_dereference_bh(q->filter_list);
 	if (!filter)
-	    return fq_codel_hash(q,skb)+1; //cahnges to b made
+	{
+	idx = fq_codel_hash(q, skb);
+		if(idx == -1)
+			return 0;
+		else
+		{
+			idx = idx % q->num_sets;
+			C :
+			i=0;
+			while(i < q->associativity)
+			{
+				flow = &q -> flows[idx*(q->associativity) + i];
+				if(flow -> head == NULL)
+					break;
+				else
+				{
+					struct sk_buff *skb1 = flow->head;
+					if(skb_get_hash(skb1)==skb_get_hash(skb))
+						break;
+					else
+					    i++;
+				}
+			}
+			if(i == (q->associativity))
+			{
+				idx += 1;
+				goto C;
+			}
+			return (idx*(q->associativity))+i+1;
+		}
+	}
 
 	*qerr = NET_XMIT_SUCCESS | __NET_XMIT_BYPASS;
 	result = tcf_classify(skb, filter, &res, false);
@@ -467,6 +499,8 @@ static int fq_codel_init(struct Qdisc *sch, struct nlattr *opt,
 
 	sch->limit = 10*1024;
 	q->flows_cnt = 1024;
+	q->num_sets = 128;
+	q->associativity = 8;
 	q->memory_limit = 32 << 20; /* 32 MBytes */
 	q->drop_batch_size = 64;
 	q->quantum = psched_mtu(qdisc_dev(sch));

